/*
Copyright 2024 1block.ai.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/oneblock-ai/oneblock/pkg/apis/ml.oneblock.ai/v1"
	"github.com/rancher/wrangler/v2/pkg/apply"
	"github.com/rancher/wrangler/v2/pkg/condition"
	"github.com/rancher/wrangler/v2/pkg/generic"
	"github.com/rancher/wrangler/v2/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ModelTemplateVersionController interface for managing ModelTemplateVersion resources.
type ModelTemplateVersionController interface {
	generic.ControllerInterface[*v1.ModelTemplateVersion, *v1.ModelTemplateVersionList]
}

// ModelTemplateVersionClient interface for managing ModelTemplateVersion resources in Kubernetes.
type ModelTemplateVersionClient interface {
	generic.ClientInterface[*v1.ModelTemplateVersion, *v1.ModelTemplateVersionList]
}

// ModelTemplateVersionCache interface for retrieving ModelTemplateVersion resources in memory.
type ModelTemplateVersionCache interface {
	generic.CacheInterface[*v1.ModelTemplateVersion]
}

type ModelTemplateVersionStatusHandler func(obj *v1.ModelTemplateVersion, status v1.ModelTemplateVersionStatus) (v1.ModelTemplateVersionStatus, error)

type ModelTemplateVersionGeneratingHandler func(obj *v1.ModelTemplateVersion, status v1.ModelTemplateVersionStatus) ([]runtime.Object, v1.ModelTemplateVersionStatus, error)

func RegisterModelTemplateVersionStatusHandler(ctx context.Context, controller ModelTemplateVersionController, condition condition.Cond, name string, handler ModelTemplateVersionStatusHandler) {
	statusHandler := &modelTemplateVersionStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, generic.FromObjectHandlerToHandler(statusHandler.sync))
}

func RegisterModelTemplateVersionGeneratingHandler(ctx context.Context, controller ModelTemplateVersionController, apply apply.Apply,
	condition condition.Cond, name string, handler ModelTemplateVersionGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &modelTemplateVersionGeneratingHandler{
		ModelTemplateVersionGeneratingHandler: handler,
		apply:                                 apply,
		name:                                  name,
		gvk:                                   controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterModelTemplateVersionStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type modelTemplateVersionStatusHandler struct {
	client    ModelTemplateVersionClient
	condition condition.Cond
	handler   ModelTemplateVersionStatusHandler
}

func (a *modelTemplateVersionStatusHandler) sync(key string, obj *v1.ModelTemplateVersion) (*v1.ModelTemplateVersion, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type modelTemplateVersionGeneratingHandler struct {
	ModelTemplateVersionGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *modelTemplateVersionGeneratingHandler) Remove(key string, obj *v1.ModelTemplateVersion) (*v1.ModelTemplateVersion, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.ModelTemplateVersion{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *modelTemplateVersionGeneratingHandler) Handle(obj *v1.ModelTemplateVersion, status v1.ModelTemplateVersionStatus) (v1.ModelTemplateVersionStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.ModelTemplateVersionGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
